diff --git a/apps/XCSP3/verification/CheckerFastInstances.txt b/apps/XCSP3/verification/CheckerFastInstances.txt
index e6fa2e9..f7dc428 100644
--- a/apps/XCSP3/verification/CheckerFastInstances.txt
+++ b/apps/XCSP3/verification/CheckerFastInstances.txt
@@ -2,7 +2,6 @@ verification/XCSP3-Java-Tools/instancesTest/AllInterval-005.xml
 verification/XCSP3-Java-Tools/instancesTest/ColouredQueens-07.xml
 verification/XCSP3-Java-Tools/instancesTest/Kakuro-easy-000-ext.xml
 verification/XCSP3-Java-Tools/instancesTest/Kakuro-easy-000-sumdiff.xml
-verification/XCSP3-Java-Tools/instancesTest/Knapsack-30-100-00.xml
 verification/XCSP3-Java-Tools/instancesTest/Langford-3-10.xml
 verification/XCSP3-Java-Tools/instancesTest/LowAutocorrelation-015.xml
 verification/XCSP3-Java-Tools/instancesTest/MagicSquare-4-table.xml
@@ -14,7 +13,6 @@ verification/XCSP3-Java-Tools/instancesTest/Pb-gr-05.xml
 verification/XCSP3-Java-Tools/instancesTest/Pb-robin08.xml
 verification/XCSP3-Java-Tools/instancesTest/Primes-15-20-2-1.xml
 verification/XCSP3-Java-Tools/instancesTest/qcp-15-120-00_X2.xml
-verification/XCSP3-Java-Tools/instancesTest/QuadraticAssignment-qap.xml
 verification/XCSP3-Java-Tools/instancesTest/Queens-0008-m1.xml
 verification/XCSP3-Java-Tools/instancesTest/StillLife-03-06.xml
 verification/XCSP3-Java-Tools/instancesTest/Subisomorphism-A-10.xml
diff --git a/apps/XCSP3/verification/CheckerSlowInstances.txt b/apps/XCSP3/verification/CheckerSlowInstances.txt
index ec8962e..04e6d57 100644
--- a/apps/XCSP3/verification/CheckerSlowInstances.txt
+++ b/apps/XCSP3/verification/CheckerSlowInstances.txt
@@ -1,7 +1,9 @@
 verification/XCSP3-Java-Tools/instancesTest/driverlogw-09.xml
 verification/XCSP3-Java-Tools/instancesTest/GracefulGraph-K02-P04.xml
 verification/XCSP3-Java-Tools/instancesTest/GraphColoring-3-fullins-4.xml
+verification/XCSP3-Java-Tools/instancesTest/Knapsack-30-100-00.xml
 verification/XCSP3-Java-Tools/instancesTest/LangfordBin-08.xml
 verification/XCSP3-Java-Tools/instancesTest/MarketSplit-01.xml
 verification/XCSP3-Java-Tools/instancesTest/QuadraticAssignment-bur26a.xml
+verification/XCSP3-Java-Tools/instancesTest/QuadraticAssignment-qap.xml
 verification/XCSP3-Java-Tools/instancesTest/TravellingSalesman-20-30-00.xml
diff --git a/core/array_constraints.cpp b/core/array_constraints.cpp
index 68c5d70..54e942d 100644
--- a/core/array_constraints.cpp
+++ b/core/array_constraints.cpp
@@ -264,23 +264,6 @@ void allDiffArcCons(NsIntVarArray* VarArr,
 void Ns_ConstrAllDiff::ArcCons(void)
 {
         NsIntVarArray::iterator X, Y;
-        // Dovecote Theorem (to spot a dead-end earlier) //
-        NsInt min_of_arr, max_of_arr;
-        X = VarArr->begin();
-        min_of_arr = X->min();
-        max_of_arr = X->max();
-        ++X;
-        for (; X != VarArr->end(); ++X) {
-                if (X->min() < min_of_arr)
-                        min_of_arr = X->min();
-                if (X->max() > max_of_arr)
-                        max_of_arr = X->max();
-        }
-        if (static_cast<NsUInt>(max_of_arr - min_of_arr) + 1 < VarArr->size()) {
-                // all values are inconsistent
-                VarArr->begin()->removeAll();
-                return;
-        }
         // Classic ArcCons //
         NsQueue<const NsIntVar*> newBoundVars;
         for (X = VarArr->begin(); X != VarArr->end(); ++X) {
@@ -650,7 +633,10 @@ Ns_ConstrTable::Ns_ConstrTable(NsIntVarArray& VarArr_init,
     table(table_init),
     isSupportsTable(isSupportsTable_init)
 {
-        revisionType = BIDIRECTIONAL_CONSISTENCY;
+        if (isSupportsTable)
+                revisionType = BIDIRECTIONAL_ARC_CONSISTENCY;
+        else
+                revisionType = BIDIRECTIONAL_CONSISTENCY;
         assert_Ns(VarArr.size() >= 2,
                   "A table constraint must refer at least to two variables");
         for (NsDeque<NsDeque<NsInt>>::const_iterator tuple = table.begin();
@@ -672,14 +658,8 @@ Ns_ConstrTable::Ns_ConstrTable(NsIntVarArray& VarArr_init,
 
 void Ns_ConstrTable::ArcConsSupports(void)
 {
-        // Initialize the supported variables' bounds
-        NsDeque<NsInt> VarArrMin(VarArr.size());
-        NsDeque<NsInt> VarArrMax(VarArr.size());
         NsDeque<NsInt>::size_type i;
-        for (i = 0; i < VarArr.size(); ++i) {
-                VarArrMin[i] = NsPLUS_INF;
-                VarArrMax[i] = NsMINUS_INF;
-        }
+        NsDeque<set<NsInt>> VarArrSupportValues(VarArr.size());
         // Iterate through the tuples of supporting values
         for (NsDeque<NsDeque<NsInt>>::const_iterator tuple = table.begin();
              tuple != table.end(); ++tuple) {
@@ -689,18 +669,14 @@ void Ns_ConstrTable::ArcConsSupports(void)
                                 break; // tuple is not supporting
                 if (i == tuple->size()) {
                         // This is a support tuple!
-                        // Update the (supported) bounds for each variable
-                        for (i = 0; i < tuple->size(); ++i) {
-                                update_min_max((*tuple)[i], VarArrMin[i],
-                                               VarArrMax[i]);
-                        }
+                        for (i = 0; i < tuple->size(); ++i)
+                                VarArrSupportValues[i].insert((*tuple)[i]);
                 }
         }
-        // Update the supported variables' bounds
-        for (i = 0; i < VarArr.size(); ++i) {
-                VarArr[i].removeRange(NsMINUS_INF, VarArrMin[i] - 1, this);
-                VarArr[i].removeRange(VarArrMax[i] + 1, NsPLUS_INF, this);
-        }
+        // Update the supported variables' values
+        bool foo;
+        for (i = 0; i < VarArr.size(); ++i)
+                set_to_domain(VarArrSupportValues[i], VarArr[i], this, foo);
 }
 
 void Ns_ConstrTable::ArcConsConflicts(void)
diff --git a/core/internal.h b/core/internal.h
index 9b85f73..3a03136 100644
--- a/core/internal.h
+++ b/core/internal.h
@@ -8,6 +8,7 @@
 #define Ns_INTERNAL_H
 
 #include "naxos-mini.h"
+#include <set>
 
 bool intersectionEmpty(const naxos::NsIntVar* VarY,
                        const naxos::NsIntVar* VarZ);
@@ -44,4 +45,7 @@ void array_VarArr_elements_min_max(const naxos::NsIntVarArray& VarArr,
 void update_min_max(const naxos::NsInt candidate, naxos::NsInt& min,
                     naxos::NsInt& max);
 
+void set_to_domain(const std::set<naxos::NsInt>& S, naxos::NsIntVar& V,
+                   const naxos::Ns_Constraint* constraint, bool& modification);
+
 #endif // Ns_INTERNAL_H
diff --git a/core/naxos-mini.h b/core/naxos-mini.h
index 32d8baa..8a08035 100644
--- a/core/naxos-mini.h
+++ b/core/naxos-mini.h
@@ -1430,7 +1430,7 @@ class Ns_ConstrXeqYtimesC : public Ns_Constraint {
         Ns_ConstrXeqYtimesC(NsIntVar* X, NsIntVar* Y, const NsInt C_init)
           : VarX(X), VarY(Y), C(C_init)
         {
-                revisionType = BIDIRECTIONAL_CONSISTENCY;
+                revisionType = VALUE_CONSISTENCY;
                 assert_Ns(&VarX->manager() == &VarY->manager(),
                           "Ns_ConstrXeqYtimesC::Ns_ConstrXeqYtimesC: All the "
                           "variables of a constraint must belong to the same "
@@ -1465,7 +1465,7 @@ class Ns_ConstrXeqYplusZ : public Ns_Constraint {
         Ns_ConstrXeqYplusZ(NsIntVar* X, NsIntVar* Y, NsIntVar* Z)
           : VarX(X), VarY(Y), VarZ(Z)
         {
-                revisionType = BIDIRECTIONAL_CONSISTENCY;
+                revisionType = BIDIRECTIONAL_ARC_CONSISTENCY;
                 assert_Ns(&VarX->manager() == &VarY->manager() &&
                               &VarY->manager() == &VarZ->manager(),
                           "Ns_ConstrXeqYplusZ::Ns_ConstrXeqYplusZ: All the "
@@ -2210,7 +2210,7 @@ class Ns_ConstrXeqY : public Ns_Constraint {
     public:
         Ns_ConstrXeqY(NsIntVar* X, NsIntVar* Y) : VarX(X), VarY(Y)
         {
-                revisionType = BIDIRECTIONAL_CONSISTENCY;
+                revisionType = VALUE_CONSISTENCY;
                 assert_Ns(&VarX->manager() == &VarY->manager(),
                           "Ns_ConstrXeqY::Ns_ConstrXeqY: All the variables of "
                           "a constraint must belong to the same "
diff --git a/core/var_constraints.cpp b/core/var_constraints.cpp
index 076ad53..4b92297 100644
--- a/core/var_constraints.cpp
+++ b/core/var_constraints.cpp
@@ -528,55 +528,58 @@ void Ns_ConstrXeqCminusY::LocalArcCons(Ns_QueueItem& /*Qitem*/)
 
 void Ns_ConstrXeqYtimesC::ArcCons(void)
 {
-        bool modification;
-        do {
-                modification = false;
-                if (C >= 0) {
-                        VarX->removeRange(NsMINUS_INF, VarY->min() * C - 1,
-                                          this, modification);
-                        VarX->removeRange(VarY->max() * C + 1, NsPLUS_INF, this,
-                                          modification);
-                        VarY->removeRange(NsMINUS_INF, VarX->min() / C - 1,
-                                          this, modification);
-                        VarY->removeRange(VarX->max() / C + 1, NsPLUS_INF, this,
-                                          modification);
-                } else {
-                        VarX->removeRange(NsMINUS_INF, VarY->max() * C - 1,
-                                          this, modification);
-                        VarX->removeRange(VarY->min() * C + 1, NsPLUS_INF, this,
-                                          modification);
-                        VarY->removeRange(NsMINUS_INF, VarX->max() / C - 1,
-                                          this, modification);
-                        VarY->removeRange(VarX->min() / C + 1, NsPLUS_INF, this,
-                                          modification);
-                }
-        } while (modification);
+        NsIntVar::const_iterator v;
+        for (v = VarX->begin(); v != VarX->end(); ++v) {
+                if (*v % C != 0 || !VarY->contains(*v / C))
+                        VarX->removeSingle(*v, this);
+        }
+        for (v = VarY->begin(); v != VarY->end(); ++v) {
+                if (!VarX->contains(*v * C))
+                        VarY->removeSingle(*v, this);
+        }
 }
 
-void Ns_ConstrXeqYtimesC::LocalArcCons(Ns_QueueItem& /*Qitem*/)
+void Ns_ConstrXeqYtimesC::LocalArcCons(Ns_QueueItem& Qitem)
 {
-        ArcCons();
+        NsInt SupportVal;
+        if (VarX == Qitem.getVarFired()) {
+                SupportVal = Qitem.getW() / C;
+                if (Qitem.getW() % C == 0 && VarY->contains(SupportVal))
+                        VarY->removeSingle(SupportVal, this);
+        } else {
+                assert_Ns(
+                    VarY == Qitem.getVarFired(),
+                    "Ns_ConstrXeqYtimesC::LocalArcCons: Wrong getVarFired");
+                SupportVal = Qitem.getW() * C;
+                if (VarX->contains(SupportVal))
+                        VarX->removeSingle(SupportVal, this);
+        }
 }
 
 void Ns_ConstrXeqY::ArcCons(void)
 {
-        bool modification;
-        do {
-                modification = false;
-                VarX->removeRange(NsMINUS_INF, VarY->min() - 1, this,
-                                  modification);
-                VarX->removeRange(VarY->max() + 1, NsPLUS_INF, this,
-                                  modification);
-                VarY->removeRange(NsMINUS_INF, VarX->min() - 1, this,
-                                  modification);
-                VarY->removeRange(VarX->max() + 1, NsPLUS_INF, this,
-                                  modification);
-        } while (modification);
+        NsIntVar::const_iterator v;
+        for (v = VarX->begin(); v != VarX->end(); ++v) {
+                if (!VarY->contains(*v))
+                        VarX->removeSingle(*v, this);
+        }
+        for (v = VarY->begin(); v != VarY->end(); ++v) {
+                if (!VarX->contains(*v))
+                        VarY->removeSingle(*v, this);
+        }
 }
 
-void Ns_ConstrXeqY::LocalArcCons(Ns_QueueItem& /*Qitem*/)
+void Ns_ConstrXeqY::LocalArcCons(Ns_QueueItem& Qitem)
 {
-        ArcCons();
+        if (VarX == Qitem.getVarFired()) {
+                if (VarY->contains(Qitem.getW()))
+                        VarY->removeSingle(Qitem.getW(), this);
+        } else {
+                assert_Ns(VarY == Qitem.getVarFired(),
+                          "Ns_ConstrXeqY::LocalArcCons: Wrong getVarFired");
+                if (VarX->contains(Qitem.getW()))
+                        VarX->removeSingle(Qitem.getW(), this);
+        }
 }
 
 void Ns_ConstrXeqYdivC::ArcCons(void)
@@ -1046,60 +1049,58 @@ void Ns_ConstrXorY::LocalArcCons(Ns_QueueItem& Qitem)
         }
 }
 
+/// Projects the set of values S to the domain of V
+void set_to_domain(const set<NsInt>& S, NsIntVar& V,
+                   const Ns_Constraint* constraint, bool& modification)
+{
+        NsInt previous_val = NsMINUS_INF;
+        for (set<NsInt>::const_iterator val = S.begin(); val != S.end();
+             ++val) {
+                V.removeRange(previous_val + 1, *val - 1, constraint,
+                              modification);
+                previous_val = *val;
+        }
+        V.removeRange(previous_val + 1, NsPLUS_INF, constraint, modification);
+}
+
+namespace {
+
+void collect_sum_values(set<NsInt>& S, const NsIntVar& Y, const NsIntVar& Z)
+{
+        S.clear();
+        for (NsIntVar::const_iterator y = Y.begin(); y != Y.end(); ++y)
+                for (NsIntVar::const_iterator z = Z.begin(); z != Z.end(); ++z)
+                        S.insert(*y + *z);
+}
+
+void collect_difference_values(set<NsInt>& S, const NsIntVar& X,
+                               const NsIntVar& Y)
+{
+        S.clear();
+        for (NsIntVar::const_iterator x = X.begin(); x != X.end(); ++x)
+                for (NsIntVar::const_iterator y = Y.begin(); y != Y.end(); ++y)
+                        S.insert(*x - *y);
+}
+
+} // end namespace
+
 // bounds-consistency only
 void Ns_ConstrXeqYplusZ::ArcCons(void)
 {
-        bool changed_summinmax = true;
-        for (;;) {
-                do {
-                        if (!VarX->removeRange(NsMINUS_INF,
-                                               VarY->min() + VarZ->min() - 1,
-                                               this))
-                                return;
-                        if (VarY->min() + VarZ->max() < VarX->min()) {
-                                if (!VarY->removeRange(
-                                        NsMINUS_INF,
-                                        -VarZ->max() + VarX->min() - 1, this))
-                                        return;
-                                changed_summinmax = true;
-                        }
-                        if (VarZ->min() + VarY->max() < VarX->min()) {
-                                if (!VarZ->removeRange(
-                                        NsMINUS_INF,
-                                        -VarY->max() + VarX->min() - 1, this))
-                                        return;
-                                changed_summinmax = true;
-                        }
-                } while (VarX->min() < VarY->min() + VarZ->min());
-                // Initially 'changed_summinmax' was intentionally set true, in
-                // order the following 'if' statement to be ignored, the first
-                // time it is executed.
-                if (!changed_summinmax)
-                        break;
-                changed_summinmax = false;
-                do {
-                        if (!VarX->removeRange(VarY->max() + VarZ->max() + 1,
-                                               NsPLUS_INF, this))
-                                return;
-                        if (VarY->max() + VarZ->min() > VarX->max()) {
-                                if (!VarY->removeRange(-VarZ->min() +
-                                                           VarX->max() + 1,
-                                                       NsPLUS_INF, this))
-                                        return;
-                                changed_summinmax = true;
-                        }
-                        if (VarZ->max() + VarY->min() > VarX->max()) {
-                                if (!VarZ->removeRange(-VarY->min() +
-                                                           VarX->max() + 1,
-                                                       NsPLUS_INF, this))
-                                        return;
-                                changed_summinmax = true;
-                        }
-                } while (VarX->max() > VarY->max() + VarZ->max());
-                if (!changed_summinmax)
-                        break;
-                changed_summinmax = false;
-        }
+        bool modification;
+        do {
+                set<NsInt> S;
+                // S = {x | x = y + z, y in D_Y, z in D_Z}
+                collect_sum_values(S, *VarY, *VarZ);
+                set_to_domain(S, *VarX, this, modification);
+                modification = false;
+                // S = {y | x = y + z, x in D_X, z in D_Z}
+                collect_difference_values(S, *VarX, *VarZ);
+                set_to_domain(S, *VarY, this, modification);
+                // S = {z | x = y + z, x in D_X, y in D_Y}
+                collect_difference_values(S, *VarX, *VarY);
+                set_to_domain(S, *VarZ, this, modification);
+        } while (modification);
 }
 
 void Ns_ConstrXeqYplusZ::LocalArcCons(Ns_QueueItem& /*Qitem*/)
